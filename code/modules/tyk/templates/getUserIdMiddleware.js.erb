// ---- GetUserId middleware -----
var getUserIdMiddleware = new TykJS.TykMiddleware.NewMiddleware({});

getUserIdMiddleware.NewProcessRequest(function(request, session) {
    //log("Running GetUserId JSVM middleware")

    if(! session.meta_data || ! session.meta_data.userId){
        // Recuperation de l'idUtilisateur a partir du Authorization Header
        //log("Authorization Header : " + request.Headers["Authorization"][0]);
        
        if (request.Params && request.Params.token) {
           accessToken = request.Params.token[0];
        } else if(request.Headers["Authorization"][0].substring(0, 7) == "Bearer "){
            accessToken = request.Headers["Authorization"][0].replace("Bearer ", "");
        } else if(request.Headers["Authorization"][0].substring(0, 10) == "Signature "){
            accessToken = request.Headers["Authorization"][0].split('"', 2)[1];
        } else if(request.Headers["Authorization"][0].substring(0, 6) == "Basic "){
            accessToken = base64_decode(request.Headers["Authorization"][0].replace("Basic ", "")).split(':', 1)[0];
        }

        idUserRequest = {
            "Method": "GET",
            "Body": "",
            "Headers": {},
            "Domain": "http://<%= @posc_datastore_host %>:<%= @posc_datastore_port %>",
            "Resource": "<%= @service_path %>" + accessToken,
            "FormData": {}
        };
        
         authTokenApi = JSON.parse(TykMakeHttpRequest(JSON.stringify(idUserRequest)));
         //log("tokenccu Service Response Code: " + authTokenApi.Code);
         //log("tokenccu Service Response Body: " + authTokenApi.Body);
    
        if(authTokenApi.Code == 200){
            authTokenApiBody = JSON.parse(authTokenApi.Body);
            strUserId = authTokenApiBody.userId.replace("/v1/utilisateurs/", "");
            session.meta_data = {"userId": strUserId};
        } else {
            log("ERROR recuperation idUtilisateur pour Authorization Header " + request.Headers["Authorization"][0].replace("Bearer ", "")
                + " tokenccu Service Response Code " + authTokenApi.Code + ", Body : " + authTokenApi.Body);
            return getUserIdMiddleware.ReturnData(request, session.meta_data);
        }
    }
    
    //log("Header Hub-Utilisateur : " + session.meta_data.userId);
    strUserId = session.meta_data.userId.replace("/v1/utilisateurs/", "");
    request.SetHeaders = {"Hub-Utilisateur": strUserId, "Hub-UserHref": "/v1/utilisateurs/" + strUserId};

    return getUserIdMiddleware.ReturnData(request, session.meta_data);
});

// Ensure init with a post-declaration log message
log("GetUserId middleware initialised");

function base64_decode(data) {
  //  discuss at: http://phpjs.org/functions/base64_decode/
  // original by: Tyler Akins (http://rumkin.com)
  // improved by: Thunder.m
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //    input by: Aman Gupta
  //    input by: Brett Zamir (http://brett-zamir.me)
  // bugfixed by: Onno Marsman
  // bugfixed by: Pellentesque Malesuada
  // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
  //   returns 1: 'Kevin van Zonneveld'
  //   example 2: base64_decode('YQ===');
  //   returns 2: 'a'

  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    dec = '',
    tmp_arr = [];

  if (!data) {
    return data;
  }

  data += '';

  do { // unpack four hexets into three octets using index points in b64
    h1 = b64.indexOf(data.charAt(i++));
    h2 = b64.indexOf(data.charAt(i++));
    h3 = b64.indexOf(data.charAt(i++));
    h4 = b64.indexOf(data.charAt(i++));

    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

    o1 = bits >> 16 & 0xff;
    o2 = bits >> 8 & 0xff;
    o3 = bits & 0xff;

    if (h3 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1);
    } else if (h4 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1, o2);
    } else {
      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    }
  } while (i < data.length);

  dec = tmp_arr.join('');

  return dec.replace(/\0+$/, '');
}
